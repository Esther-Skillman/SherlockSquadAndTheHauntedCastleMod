# For up-to-date documentation, see:
# - https://www.mindfeastgames.com/MultiTurn/Docs/ModdersGuide.html
# - https://www.mindfeastgames.com/MultiTurn/Docs/API.html
# This file has lots of in-file explanation comments.
# If you want a clearer view, take a glance at one of the others like Level_2_players_3.yaml)

# Included files will be loaded and their contents referenced here.
# In the event of any clashes, the _including_ file 'wins'.
include: [ LevelsShared.yaml ]

# Properties about the file like its creator
fileProperties:
  creatorName: Your name here!

# The Unity scene that will be loaded as background.  Leave this unmodified for now.
sceneName: World1Dev

# Settings for configuring the level camera and post processing effects
cameraSettings:
  type: static
  postProcessing:
    depthOfField: { enabled: false }

# The next 3 sections describe the map layout including what is what and where.
#
# 1. `grid`
# The `grid` describes overall layout.
# Each cell of `grid` has a code (e.g. A1, 02) that is looked-up in `gridObjects`.
#
# 2. `gridObjects`
# Each code in `gridObjects` (e.g. A1, 02) provides a list of objects in this grid position.
# Each object is one of 3 things:
#  a. a code (e.g. B, Pt) which appears in `objectDefinitions`.
#  b. a full object definition (see `objectDefinitions`).
#  c. a combination of both -- a code _and_ customisations that are overlaid on the described object.
#
# Example:
#  By default, you've set beds to face south (you chose code `B` and set the direction in `objectDefinitions`).
#  While that's fine in most places you've used it, you want a few to face east.
#  To make some face east, you can put a customisation which takes priority over the default.
#  Note: another (just as valid) way to achieve the same thing would be to have 2 different `objectDefinition`s -- one facing south, one east.
#
# 3. `objectDefinitions`
# Each code from `gridObjects` (e.g. B, Pt) references one (and only one) object definition.
# An object definition is *at least* a 'known' MapObject.  These are defined by the game and can be found on [[TODO WEBSITE]]!
# Usually an object definition will include more information -- see below.
#
# Object definition:
# Both `gridObjects` and `objectDefinitions` allow describing a MapObject.
# At minimum, that is a code defined when the game was built.  See [[TODO WEBSITE]]
# In addition, the object definition can include:
# - `dir`  : a direction it faces.
# - `mods` : a list of mods (which can optionally include `data` for just this mod).
# - `data` : data that will be provided to *all mods on this MapObject*.
#
# Mods:
# A mod consists of *at least* a mod filename (within the general mods area).
# It can also include `data` for just this mod.

# The map/grid.  A rectangular list of references to `gridObjects` below
# We find it handy to use column-row coordinate naming.
# You can name however you prefer -- as long as it has a value in `gridObjects` below.
grid: |
  __,--,--,--,--,
  //,A1,B1,C1,D1,
  //,A2,B2,C2,D2,
  //,A3,B3,C3,D3,
# __ = Empty space on the map
# Any 2 character txt = a tile with or without game objects

# Explanation:
# The grid contains numbers as references to objects on the map.
# You can use whatever reference system you prefer.
# Just change the `gridObjects` to match your new reference system (e.g. row+column like A1, A2, B1, B2).

# Mappings from `grid` above (e.g. "A1") to a list of LevelObjects each *at least* including a reference to an `objectDefinitions` member (below)
gridObjects:
  --: [ wall_s ]
  //: [ wall_e ]
  A1: [ f, poster_s_2d, gm ]
  B1: [ f, poster_s ]
  C1: [ f, b_s, bedWriting ]
  D1: [ f, water ]
  A2: [ f, tray , water ]
  B2: [ f ]
  C2: [ f, pill]
  D2: [ f, { id: patient, data: { id: pt1 } }]
  A3: [ f, p1, poster_e ]
  B3: [ f, power1 ]
  C3: [ f]
  D3: [ f, p2 ]

objectDefinitions:
  # Can be defined here or, more likely, both here _and_ in LevelsShared.yaml
  # Set-up base values in LevelsShared.yaml and override here.
  power1:
    mapObject: BlankMobile
    art3d:
    - model: "Art/3D/Sphere.glb"
      pos: { y: 1 }
      scale: { x: 0.5, y: 0.5, z: 0.6 }
    art2d:
    - texture: "MakeYourOwnWithThisTemplate.png"
      displayType: decal
      projectionDistance: 1
      pos: { x: -0.5, y: 0.6, z: -0.5 }
      rot: { x: 45, y: 135, z: 0 }
      scale: { x: 0.7, y: 0.7, z: 1 }
    mods:
    - name: DestroyOwnerWhenPlayerEntersSquare

  #tray:
    #mapObject: Custom
    #art3d:
    #- model: "Art/3D/tray.glb"
      #pos: {x: -1.5, y: 1.4, z: 0}
      #rot: {x: 270, y: 90, z: 90}
      #scale: {x: 0.75, y: 0.75, z: 0.75}
    #mods: [tray]
    #tags: [ "throwable", "carryable" ]
  

sounds:
  # See CoOperation for examples using sound

globalData:
  # Set global data and overrides.  See https://www.mindfeastgames.com/MultiTurn/Docs/API.html#mod-data
  pt1: { health: 8, need: tray_water_pill, character: grace }
  pt2: { health: 8, need: pill, character: sammi }
